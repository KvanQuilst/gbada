!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/dylan/Projects/gbada/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
A	cpu/gbada-cpu.ads	/^          A : Register;$/;"	c	type:Registers	file:
A	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
ADC_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure ADC_Instr (Operand : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
ADD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure ADD_Instr (Operand : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
ADD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure ADD_Instr (Operand : Register16) is$/;"	r	package:Gbada.CPU.Instructions	file:
ADD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure ADD_Instr (Operand : UInt8) is$/;"	r	package:Gbada.CPU.Instructions	file:
AF	cpu/gbada-cpu.ads	/^          AF : Register16;$/;"	c	type:Registers	file:
AF	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
AND_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure AND_Instr (Operand : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
Addr	cpu/gbada-cpu-instructions.adb	/^    Addr : UInt16_Split := (False, 16#FF#, Operand);$/;"	v	subprogram:LDH_Instr	file:
Addr	cpu/gbada-cpu-instructions.adb	/^    Addr : UInt16_Split := (False, 16#FF#, Reg.C.Val);$/;"	v	subprogram:LD_Instr	file:
Address	gbada-memory.ads	/^  subtype Address is UInt16 range 0 .. 16#FFFF#;$/;"	u	packspec:Gbada.Memory
B	cpu/gbada-cpu.ads	/^          B : Register;$/;"	c	type:Registers	file:
B	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
BC	cpu/gbada-cpu.ads	/^          BC : Register16;$/;"	c	type:Registers	file:
BC	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
Bit	gbada-types.ads	/^  type Bit is mod 2**1;$/;"	t	packspec:Gbada.Types
ByteArr	gbada-types.ads	/^  type ByteArr is array (Positive range <>) of UInt8;$/;"	t	packspec:Gbada.Types
ByteCode	cpu/gbada-cpu-instructions.adb	/^    ByteCode : UInt8 := ReadByte (Reg.PC);$/;"	v	subprogram:Read_Instruction	file:
C	cpu/gbada-cpu-instructions.adb	/^    C : UInt8 := (if Reg.F.Carry_Flag = 2#1# then 2#1# else 2#0#);$/;"	v	subprogram:ADC_Instr	file:
C	cpu/gbada-cpu-instructions.adb	/^    C : UInt8 := (if Reg.F.Carry_Flag = 2#1# then 2#1# else 2#0#);$/;"	v	subprogram:SBC_Instr	file:
C	cpu/gbada-cpu-instructions.adb	/^  type Conditional is (NZ, Z, NC, C);$/;"	l	type:Conditional	file:
C	cpu/gbada-cpu.ads	/^          C : Register;$/;"	c	type:Registers	file:
C	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
CALL_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure CALL_Instr (Addr : Address) is$/;"	r	package:Gbada.CPU.Instructions	file:
CALL_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure CALL_Instr (Cond : Conditional; Addr : Address) is$/;"	r	package:Gbada.CPU.Instructions	file:
CP_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure CP_Instr (Operand : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
CP_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure CP_Instr (Operand : UInt8) is$/;"	r	package:Gbada.CPU.Instructions	file:
C_IO	cpu/gbada-cpu-instructions.adb	/^  type C_IO is (In_C, Out_C);$/;"	t	package:Gbada.CPU.Instructions	file:
Carry_Flag	cpu/gbada-cpu.ads	/^          Carry_Flag : Bit := 2#0#;$/;"	c	type:Register	file:
CheckZero	cpu/gbada-cpu-instructions.adb	/^  procedure CheckZero is$/;"	r	package:Gbada.CPU.Instructions	file:
CheckZero	cpu/gbada-cpu-instructions.ads	/^  procedure CheckZero with Inline;$/;"	R	packspec:Gbada.CPU.Instructions	file:
Conditional	cpu/gbada-cpu-instructions.adb	/^  type Conditional is (NZ, Z, NC, C);$/;"	t	package:Gbada.CPU.Instructions	file:
D	cpu/gbada-cpu.ads	/^          D : Register;$/;"	c	type:Registers	file:
D	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
DE	cpu/gbada-cpu.ads	/^          DE : Register16;$/;"	c	type:Registers	file:
DE	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
DEC_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure DEC_Instr (Operand : in out Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
DEC_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure DEC_Instr (Operand : in out Register16) is$/;"	r	package:Gbada.CPU.Instructions	file:
DI_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure DI_Instr is$/;"	r	package:Gbada.CPU.Instructions	file:
Data	gbada-memory.adb	/^    Data : UInt16_Split := (False,$/;"	v	subprogram:ReadDouble	file:
Data	gbada-memory.adb	/^    Data : UInt16_Split := (True, Val); $/;"	v	subprogram:WriteDouble	file:
Data	gbada-memory.adb	/^    Data : UInt16_Split := (True, Val);$/;"	v	subprogram:WriteDouble	file:
E	cpu/gbada-cpu.ads	/^          E : Register;$/;"	c	type:Registers	file:
E	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
F	cpu/gbada-cpu.ads	/^          F : Register;$/;"	c	type:Registers	file:
F	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
F	gbada-cartridgereader.adb	/^    F : File_Type;$/;"	v	subprogram:ReadRom	file:
FF00_IO	cpu/gbada-cpu-instructions.adb	/^  type FF00_IO is (In_FF00, Out_FF00);$/;"	t	package:Gbada.CPU.Instructions	file:
Gbada	gbada.ads	/^package Gbada is$/;"	P
Gbada.CPU	cpu/gbada-cpu.adb	/^package body Gbada.CPU is$/;"	p
Gbada.CPU	cpu/gbada-cpu.ads	/^package Gbada.CPU is$/;"	P
Gbada.CPU.Instructions	cpu/gbada-cpu-instructions.adb	/^package body Gbada.CPU.Instructions is$/;"	p
Gbada.CPU.Instructions	cpu/gbada-cpu-instructions.ads	/^package Gbada.CPU.Instructions is$/;"	P
Gbada.CPU.Interrupts	cpu/gbada-cpu-interrupts.ads	/^package Gbada.CPU.Interrupts is$/;"	P
Gbada.CartridgeReader	gbada-cartridgereader.adb	/^package body Gbada.CartridgeReader is$/;"	p
Gbada.CartridgeReader	gbada-cartridgereader.ads	/^package Gbada.CartridgeReader is$/;"	P
Gbada.Memory	gbada-memory.adb	/^package body Gbada.Memory is$/;"	p
Gbada.Memory	gbada-memory.ads	/^package Gbada.Memory is$/;"	P
Gbada.Types	gbada-types.ads	/^package Gbada.Types is$/;"	P
H	cpu/gbada-cpu.ads	/^          H : Register;$/;"	c	type:Registers	file:
H	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
HL	cpu/gbada-cpu.ads	/^          HL : Register16;$/;"	c	type:Registers	file:
HL	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
HL_IO	cpu/gbada-cpu-instructions.adb	/^  type HL_IO is (In_HL, Out_HL);$/;"	t	package:Gbada.CPU.Instructions	file:
HalfCarry_Flag	cpu/gbada-cpu.ads	/^          HalfCarry_Flag : Bit := 2#0#;$/;"	c	type:Register	file:
I	gbada-cartridgereader.adb	/^    I : Address := 0;$/;"	v	subprogram:ReadRom	file:
INC_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure INC_Instr (Operand : in out Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
INC_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure INC_Instr (Operand : in out Register16) is$/;"	r	package:Gbada.CPU.Instructions	file:
INT_JoyPad	gbada-memory.ads	/^      INT_VBlank, INT_Stat, INT_Timer, INT_Serial, INT_JoyPad$/;"	l	type:MemoryLocation	file:
INT_Serial	gbada-memory.ads	/^      INT_VBlank, INT_Stat, INT_Timer, INT_Serial, INT_JoyPad$/;"	l	type:MemoryLocation	file:
INT_Stat	gbada-memory.ads	/^      INT_VBlank, INT_Stat, INT_Timer, INT_Serial, INT_JoyPad$/;"	l	type:MemoryLocation	file:
INT_Timer	gbada-memory.ads	/^      INT_VBlank, INT_Stat, INT_Timer, INT_Serial, INT_JoyPad$/;"	l	type:MemoryLocation	file:
INT_VBlank	gbada-memory.ads	/^      INT_VBlank, INT_Stat, INT_Timer, INT_Serial, INT_JoyPad$/;"	l	type:MemoryLocation	file:
Image	cpu/gbada-cpu-instructions.ads	/^      Image : String (1..14);$/;"	c	type:Instruction	file:
In_C	cpu/gbada-cpu-instructions.adb	/^  type C_IO is (In_C, Out_C);$/;"	l	type:C_IO	file:
In_FF00	cpu/gbada-cpu-instructions.adb	/^  type FF00_IO is (In_FF00, Out_FF00);$/;"	l	type:FF00_IO	file:
In_HL	cpu/gbada-cpu-instructions.adb	/^  type HL_IO is (In_HL, Out_HL);$/;"	l	type:HL_IO	file:
Instr_Arr	cpu/gbada-cpu-instructions.ads	/^  type Instr_Arr is array (UInt8'Range) of Instruction;$/;"	t	packspec:Gbada.CPU.Instructions	file:
Instr_Delay	cpu/gbada-cpu.ads	/^    Instr_Delay : Time_Span;$/;"	v	packspec:Gbada.CPU	file:
Instr_Info	cpu/gbada-cpu-instructions.ads	/^  Instr_Info : constant Instr_Arr := ($/;"	n	packspec:Gbada.CPU.Instructions	file:
Instr_Start	cpu/gbada-cpu.ads	/^    Instr_Start : Time;$/;"	v	packspec:Gbada.CPU	file:
Instruction	cpu/gbada-cpu-instructions.ads	/^  type Instruction is$/;"	t	packspec:Gbada.CPU.Instructions	file:
Instruction_String	cpu/gbada-cpu-instructions.adb	/^  function Instruction_String return String is$/;"	r	package:Gbada.CPU.Instructions	file:
Instruction_String	cpu/gbada-cpu-instructions.ads	/^  function Instruction_String return String;$/;"	R	packspec:Gbada.CPU.Instructions
Interrupts	cpu/gbada-cpu.ads	/^    Interrupts : Boolean := True;$/;"	v	packspec:Gbada.CPU	file:
Invalid_Instruction_Call_Exception	cpu/gbada-cpu-instructions.ads	/^  Invalid_Instruction_Call_Exception : exception;$/;"	x	packspec:Gbada.CPU.Instructions	file:
Invalid_Memory_Reference_Exception	gbada-memory.ads	/^  Invalid_Memory_Reference_Exception : exception;$/;"	x	packspec:Gbada.Memory	file:
JP_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure JP_Instr (Addr : Address) is$/;"	r	package:Gbada.CPU.Instructions	file:
JP_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure JP_Instr (Cond : Conditional; Addr : Address) is$/;"	r	package:Gbada.CPU.Instructions	file:
JR_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure JR_Instr (Cond : Conditional; Operand : UInt8) is$/;"	r	package:Gbada.CPU.Instructions	file:
JR_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure JR_Instr (Operand : UInt8) is$/;"	r	package:Gbada.CPU.Instructions	file:
Jump	cpu/gbada-cpu-instructions.adb	/^    Jump : Boolean;$/;"	v	subprogram:CALL_Instr	file:
Jump	cpu/gbada-cpu-instructions.adb	/^    Jump : Boolean;$/;"	v	subprogram:JP_Instr	file:
Jump	cpu/gbada-cpu-instructions.adb	/^    Jump : Boolean;$/;"	v	subprogram:JR_Instr	file:
L	cpu/gbada-cpu.ads	/^          L : Register;$/;"	c	type:Registers	file:
L	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
LDD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LDD_Instr (IO : HL_IO) is$/;"	r	package:Gbada.CPU.Instructions	file:
LDHL_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LDHL_Instr (Operand : UInt8) is$/;"	r	package:Gbada.CPU.Instructions	file:
LDH_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LDH_Instr (Operand : UInt8; IO : FF00_IO) is$/;"	r	package:Gbada.CPU.Instructions	file:
LDI_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LDI_Instr (IO : HL_IO) is$/;"	r	package:Gbada.CPU.Instructions	file:
LD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LD_Instr (Addr : Address) is$/;"	r	package:Gbada.CPU.Instructions	file:
LD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LD_Instr (Addr : Address; Operand : UInt8) is$/;"	r	package:Gbada.CPU.Instructions	file:
LD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LD_Instr (Addr : Address; Source : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
LD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LD_Instr (Dest : out Register16; Operand : UInt16) is$/;"	r	package:Gbada.CPU.Instructions	file:
LD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LD_Instr (Dest : out Register16; Source : Register16) is$/;"	r	package:Gbada.CPU.Instructions	file:
LD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LD_Instr (Dest : out Register; Addr : Address) is$/;"	r	package:Gbada.CPU.Instructions	file:
LD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LD_Instr (Dest : out Register; Operand : UInt8) is$/;"	r	package:Gbada.CPU.Instructions	file:
LD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LD_Instr (Dest : out Register; Source : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
LD_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure LD_Instr (IO : C_IO) is$/;"	r	package:Gbada.CPU.Instructions	file:
Lower	cpu/gbada-cpu.ads	/^          Lower : Register;$/;"	c	type:Register16	file:
Lower	gbada-types.ads	/^          Lower : UInt8;$/;"	c	type:UInt16_Split	file:
M_Cycle	cpu/gbada-cpu.ads	/^    M_Cycle : constant Time_Span := Nanoseconds (4 * 238);$/;"	n	packspec:Gbada.CPU	file:
M_Cycles	cpu/gbada-cpu-instructions.ads	/^      M_Cycles : UInt8;$/;"	c	type:Instruction	file:
Main	main.adb	/^procedure Main is$/;"	r
MemMap	gbada-memory.ads	/^  MemMap : MemorySpace;$/;"	v	packspec:Gbada.Memory	file:
MemoryLocation	gbada-memory.ads	/^  type MemoryLocation is ($/;"	t	packspec:Gbada.Memory
MemorySpace	gbada-memory.ads	/^  type MemorySpace is array (Address) of UInt8;$/;"	t	packspec:Gbada.Memory
NC	cpu/gbada-cpu-instructions.adb	/^  type Conditional is (NZ, Z, NC, C);$/;"	l	type:Conditional	file:
NOP_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure NOP_Instr is$/;"	r	package:Gbada.CPU.Instructions	file:
NZ	cpu/gbada-cpu-instructions.adb	/^  type Conditional is (NZ, Z, NC, C);$/;"	l	type:Conditional	file:
OR_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure OR_Instr (Operand : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
Operand16	cpu/gbada-cpu-instructions.adb	/^    Operand16 : UInt16;$/;"	v	subprogram:Read_Instruction	file:
Operand8	cpu/gbada-cpu-instructions.adb	/^    Operand8 : UInt8;$/;"	v	subprogram:Read_Instruction	file:
Operands	cpu/gbada-cpu-instructions.ads	/^      Operands : UInt16;$/;"	c	type:Instruction	file:
Out_C	cpu/gbada-cpu-instructions.adb	/^  type C_IO is (In_C, Out_C);$/;"	l	type:C_IO	file:
Out_FF00	cpu/gbada-cpu-instructions.adb	/^  type FF00_IO is (In_FF00, Out_FF00);$/;"	l	type:FF00_IO	file:
Out_HL	cpu/gbada-cpu-instructions.adb	/^  type HL_IO is (In_HL, Out_HL);$/;"	l	type:HL_IO	file:
PC	cpu/gbada-cpu.ads	/^      PC : Address;$/;"	c	type:Registers	file:
PC	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
POP_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure POP_Instr (Dest : out Register16) is$/;"	r	package:Gbada.CPU.Instructions	file:
PUSH_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure PUSH_Instr (Source : Register16) is$/;"	r	package:Gbada.CPU.Instructions	file:
Print_Register	cpu/gbada-cpu.adb	/^  procedure Print_Register (R : Register_Name) is$/;"	r	package:Gbada.CPU	file:
Print_Register	cpu/gbada-cpu.ads	/^  procedure Print_Register (R : Register_Name); $/;"	R	packspec:Gbada.CPU
Print_Registers	cpu/gbada-cpu.adb	/^  procedure Print_Registers (Header : Boolean) is$/;"	r	package:Gbada.CPU	file:
Print_Registers	cpu/gbada-cpu.ads	/^  procedure Print_Registers (Header : Boolean);$/;"	R	packspec:Gbada.CPU
R	cpu/gbada-cpu-instructions.adb	/^    R : UInt8 := Reg.A.Val - Operand.Val;$/;"	v	subprogram:CP_Instr	file:
R	cpu/gbada-cpu-instructions.adb	/^    R : UInt8 := Reg.A.Val - Operand;$/;"	v	subprogram:CP_Instr	file:
RST0	gbada-memory.ads	/^      RST0, RST8, RST10, RST18, RST20, RST28, RST30, RST38,$/;"	l	type:MemoryLocation	file:
RST10	gbada-memory.ads	/^      RST0, RST8, RST10, RST18, RST20, RST28, RST30, RST38,$/;"	l	type:MemoryLocation	file:
RST18	gbada-memory.ads	/^      RST0, RST8, RST10, RST18, RST20, RST28, RST30, RST38,$/;"	l	type:MemoryLocation	file:
RST20	gbada-memory.ads	/^      RST0, RST8, RST10, RST18, RST20, RST28, RST30, RST38,$/;"	l	type:MemoryLocation	file:
RST28	gbada-memory.ads	/^      RST0, RST8, RST10, RST18, RST20, RST28, RST30, RST38,$/;"	l	type:MemoryLocation	file:
RST30	gbada-memory.ads	/^      RST0, RST8, RST10, RST18, RST20, RST28, RST30, RST38,$/;"	l	type:MemoryLocation	file:
RST38	gbada-memory.ads	/^      RST0, RST8, RST10, RST18, RST20, RST28, RST30, RST38,$/;"	l	type:MemoryLocation	file:
RST8	gbada-memory.ads	/^      RST0, RST8, RST10, RST18, RST20, RST28, RST30, RST38,$/;"	l	type:MemoryLocation	file:
ReadByte	gbada-memory.adb	/^  function ReadByte (Addr : Address) return UInt8 is$/;"	r	package:Gbada.Memory	file:
ReadByte	gbada-memory.adb	/^  function ReadByte (Loc : MemoryLocation) return UInt8 is$/;"	r	package:Gbada.Memory	file:
ReadByte	gbada-memory.ads	/^  function ReadByte (Addr : Address) return UInt8;$/;"	R	packspec:Gbada.Memory
ReadByte	gbada-memory.ads	/^  function ReadByte (Loc : MemoryLocation) return UInt8;$/;"	R	packspec:Gbada.Memory
ReadDouble	gbada-memory.adb	/^  function ReadDouble (Addr : Address) return UInt16 is$/;"	r	package:Gbada.Memory	file:
ReadDouble	gbada-memory.adb	/^  function ReadDouble (Loc : MemoryLocation) return UInt16 is$/;"	r	package:Gbada.Memory	file:
ReadDouble	gbada-memory.ads	/^  function ReadDouble (Addr : Address) return UInt16;$/;"	R	packspec:Gbada.Memory
ReadDouble	gbada-memory.ads	/^  function ReadDouble (Loc : MemoryLocation) return UInt16;$/;"	R	packspec:Gbada.Memory
ReadRom	gbada-cartridgereader.adb	/^  procedure ReadRom (File_Name : String) is$/;"	r	package:Gbada.CartridgeReader	file:
ReadRom	gbada-cartridgereader.ads	/^  procedure ReadRom (File_Name : String);$/;"	R	packspec:Gbada.CartridgeReader
Read_Instruction	cpu/gbada-cpu-instructions.adb	/^  procedure Read_Instruction is$/;"	r	package:Gbada.CPU.Instructions	file:
Read_Instruction	cpu/gbada-cpu-instructions.ads	/^  procedure Read_Instruction;$/;"	R	packspec:Gbada.CPU.Instructions
Reg	cpu/gbada-cpu.ads	/^  Reg : Registers := (Paired => True,$/;"	v	packspec:Gbada.CPU
Register	cpu/gbada-cpu.ads	/^  type Register (Flag : Boolean := True) is $/;"	t	packspec:Gbada.CPU
Register16	cpu/gbada-cpu.ads	/^  type Register16 (Raw : Boolean := False) is$/;"	t	packspec:Gbada.CPU
Register_Name	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	t	packspec:Gbada.CPU
Registers	cpu/gbada-cpu.ads	/^  type Registers (Paired : Boolean := False) is $/;"	t	packspec:Gbada.CPU
Reserved_0_3	cpu/gbada-cpu.ads	/^          Reserved_0_3 : UInt4 := 16#0#;$/;"	c	type:Register	file:
SBC_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure SBC_Instr (Operand : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
SP	cpu/gbada-cpu.ads	/^      SP : Register16;$/;"	c	type:Registers	file:
SP	cpu/gbada-cpu.ads	/^  type Register_Name is (A, B, C, D, E, F, H, L, AF, BC, DE, HL, SP, PC);$/;"	l	type:Register_Name	file:
SUB_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure SUB_Instr (Operand : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
Start_Clock	cpu/gbada-cpu.adb	/^  procedure Start_Clock is$/;"	r	package:Gbada.CPU	file:
Start_Clock	cpu/gbada-cpu.ads	/^  procedure Start_Clock;$/;"	R	packspec:Gbada.CPU
Sub	cpu/gbada-cpu-instructions.adb	/^    Sub : Boolean := (Operand and 2#10000000#) > 0;$/;"	v	subprogram:LDHL_Instr	file:
Sub	cpu/gbada-cpu-instructions.adb	/^    Sub : Boolean := (Operand and 2#10000000#) \/= 0;$/;"	v	subprogram:JR_Instr	file:
Sub	cpu/gbada-cpu-instructions.adb	/^    Sub : Boolean := (Operand and 2#10000000#) \/= 2#0#;$/;"	v	subprogram:ADD_Instr	file:
Subtraction_Flag	cpu/gbada-cpu.ads	/^          Subtraction_Flag : Bit := 2#0#;$/;"	c	type:Register	file:
UInt16	gbada-types.ads	/^  type UInt16 is mod 2**16;$/;"	t	packspec:Gbada.Types
UInt16_IO	gbada-types.ads	/^  package UInt16_IO is new Ada.Text_IO.Modular_IO (UInt16);$/;"	P	packspec:Gbada.Types
UInt16_Split	gbada-types.ads	/^  type UInt16_Split (Raw : Boolean := True) is$/;"	t	packspec:Gbada.Types
UInt4	gbada-types.ads	/^  type UInt4 is mod 2**4;$/;"	t	packspec:Gbada.Types
UInt8	gbada-types.ads	/^  type UInt8 is mod 2**8;$/;"	t	packspec:Gbada.Types
UInt8_IO	gbada-types.ads	/^  package UInt8_IO is new Ada.Text_IO.Modular_IO (UInt8);$/;"	P	packspec:Gbada.Types
UInt8_SIO	gbada-cartridgereader.ads	/^  package UInt8_SIO is new Ada.Sequential_IO (UInt8); use UInt8_SIO;$/;"	P	packspec:Gbada.CartridgeReader
Upper	cpu/gbada-cpu.ads	/^          Upper : Register;$/;"	c	type:Register16	file:
Upper	gbada-types.ads	/^          Upper : UInt8;$/;"	c	type:UInt16_Split	file:
Val	cpu/gbada-cpu-instructions.adb	/^    Val : UInt16_Split := (False, (Operand and 2#01111111#), 16#00#);$/;"	v	subprogram:JR_Instr	file:
Val	cpu/gbada-cpu-instructions.adb	/^    Val : UInt16_Split := (False, 16#00#, (Operand and 2#01111111#));$/;"	v	subprogram:ADD_Instr	file:
Val	cpu/gbada-cpu-instructions.adb	/^    Val : UInt16_Split := (False, 16#00#, (Operand and 2#01111111#));$/;"	v	subprogram:LDHL_Instr	file:
Val	cpu/gbada-cpu.ads	/^          Val : Address;$/;"	c	type:Register16	file:
Val	cpu/gbada-cpu.ads	/^          Val : UInt8 := 16#00#;$/;"	c	type:Register	file:
Val	gbada-cartridgereader.adb	/^    Val : UInt8;$/;"	v	subprogram:ReadRom	file:
Val	gbada-types.ads	/^          Val : UInt16;$/;"	c	type:UInt16_Split	file:
Val_Addr	gbada-memory.adb	/^    Val_Addr : Address := ValidateAddress (Addr);$/;"	v	subprogram:ReadByte	file:
Val_Addr	gbada-memory.adb	/^    Val_Addr : Address := ValidateAddress (Addr);$/;"	v	subprogram:ReadDouble	file:
Val_Addr	gbada-memory.adb	/^    Val_Addr : Address := ValidateAddress (Addr);$/;"	v	subprogram:WriteByte	file:
Val_Addr	gbada-memory.adb	/^    Val_Addr : Address := ValidateAddress (Addr);$/;"	v	subprogram:WriteDouble	file:
ValidateAddress	gbada-memory.adb	/^  function ValidateAddress (Addr : Address) return Address is$/;"	r	package:Gbada.Memory	file:
WriteByte	gbada-memory.adb	/^  procedure WriteByte (Addr : Address; Val : UInt8) is$/;"	r	package:Gbada.Memory	file:
WriteByte	gbada-memory.adb	/^  procedure WriteByte (Loc : MemoryLocation; Val : UInt8) is$/;"	r	package:Gbada.Memory	file:
WriteByte	gbada-memory.ads	/^  procedure WriteByte (Addr : Address; $/;"	R	packspec:Gbada.Memory
WriteByte	gbada-memory.ads	/^  procedure WriteByte (Loc : MemoryLocation;$/;"	R	packspec:Gbada.Memory
WriteDouble	gbada-memory.adb	/^  procedure WriteDouble (Addr : Address; Val : UInt16) is$/;"	r	package:Gbada.Memory	file:
WriteDouble	gbada-memory.adb	/^  procedure WriteDouble (Loc : MemoryLocation; Val : UInt16) is$/;"	r	package:Gbada.Memory	file:
WriteDouble	gbada-memory.ads	/^  procedure WriteDouble (Addr : Address; $/;"	R	packspec:Gbada.Memory
WriteDouble	gbada-memory.ads	/^  procedure WriteDouble (Loc : MemoryLocation;$/;"	R	packspec:Gbada.Memory
XOR_Instr	cpu/gbada-cpu-instructions.adb	/^  procedure XOR_Instr (Operand : Register) is$/;"	r	package:Gbada.CPU.Instructions	file:
Z	cpu/gbada-cpu-instructions.adb	/^  type Conditional is (NZ, Z, NC, C);$/;"	l	type:Conditional	file:
Zero_Flag	cpu/gbada-cpu.ads	/^          Zero_Flag : Bit := 2#0#;$/;"	c	type:Register	file:
